<div class="d-flex justify-content-end mt-3">
    <div>
        <!-- Botones de paginación -->
        <button disabled="@IsFirstPage()" @onclick="GoToFirstPage" class="btn btn-outline-secondary me-2">
            Primera
        </button>
        <button disabled="@IsFirstPage()" @onclick="GoToPreviousPage" class="btn btn-outline-secondary me-2">
            Anterior
        </button>
        <button disabled="@IsLastPage()" @onclick="GoToNextPage" class="btn btn-outline-secondary me-2">
            Siguiente
        </button>
        <button disabled="@IsLastPage()" @onclick="GoToLastPage" class="btn btn-outline-secondary">
            Última
        </button>
    </div>
</div>

@code {
    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int ItemsPerPage { get; set; }

    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }


    private bool IsFirstPage()
    {
        return CurrentPage == 1;
    }

    private bool IsLastPage()
    {
        return TotalItems != 0 && CurrentPage >= Math.Ceiling((double)TotalItems / ItemsPerPage);
    }

    private async Task GoToFirstPage()
    {
        CurrentPage = 1;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private async Task GoToLastPage()
    {
        CurrentPage = (int)Math.Ceiling((double)TotalItems / ItemsPerPage);
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private async Task GoToNextPage()
    {
        if (!IsLastPage())
        {
            CurrentPage++;
            await CurrentPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task GoToPreviousPage()
    {
        if (!IsFirstPage())
        {
            CurrentPage--;
            await CurrentPageChanged.InvokeAsync(CurrentPage);
        }
    }
}
