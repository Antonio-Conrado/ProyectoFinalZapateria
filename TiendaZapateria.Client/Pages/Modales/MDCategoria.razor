@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal;
@inject ICategoriaService categoriaService
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize(Roles = "Administrador, Empleado")]

<EditForm Model="categoria" OnValidSubmit="OnValidSubmit">

    <div Model="categoria" class="modal fade" id="modalAgregarCategoria" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header color-title">
                    <h5 class="modal-title">@titulo</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CerrarModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="nombreCategoria">Nombre de la Categoría</label>
                        <input type="text" class="form-control" id="nombreCategoria" @bind="categoria.NombreCategoria" />
                    </div>
                    <div class="form-group">
                        <label for="descripcionCategoria">Descripción</label>
                        <input type="text" class="form-control" id="descripcionCategoria" @bind="categoria.Descripcion" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-cerrar" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn-guardar" type="submit">
                        @btnTexto
                    </button>
                </div>
            </div>
        </div>
    </div>

</EditForm>



@code {
    public int idEditar;

    [Parameter]
    public EventCallback OnElementoActualizado { get; set; }


    [Parameter]
    public EventCallback OnElementoNuevo { get; set; }



    string titulo = string.Empty;
    string btnTexto = string.Empty;

    CategoriaDTO categoria = new CategoriaDTO();

    public async Task Actualizar(int id, string nombre, string descripcion, string tituloEdit,  string btn )
    {
        if (idEditar == 0)
        {
            idEditar = id; // Asignar el ID si es una nueva categoría
        }
        categoria.IdCategoria = id;
        categoria.NombreCategoria = nombre;
        categoria.Descripcion = descripcion;

        btnTexto = btn;
        titulo = tituloEdit;


    }


    public async Task Agregar(string tituloEdit, string btn)
    {

        btnTexto = btn;
        titulo = tituloEdit;
    }





    private async Task OnValidSubmit()
    {

        if (string.IsNullOrWhiteSpace(categoria.Descripcion) || string.IsNullOrWhiteSpace(categoria.NombreCategoria))
        {
            await MostrarMensajeError("Todos los campos son obligatorios");
        }
        else
        {
            int idDevuelto = 0;
            bool operacionExitosa = false;
            if (idEditar == 0)
            {
                
                idDevuelto = await categoriaService.Guardar(categoria);
                await MostrarMensajeExito("Agregado Correctamente");
                await CerrarModal();
                await OnElementoActualizado.InvokeAsync();

            }
            else
            {
               
                operacionExitosa = await categoriaService.Editar(categoria);
                await MostrarMensajeExito("Editado Correctamente");
                await CerrarModal();
                await OnElementoActualizado.InvokeAsync();

            }

        }
        


    }

    private async Task MostrarMensajeError(string mensaje)
    {

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = mensaje,
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK"
            });
    }


    private async Task MostrarMensajeExito(string mensaje)
    {

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Exito",
                Text = mensaje,
                Icon = SweetAlertIcon.Success,
                ConfirmButtonText = "OK"
            });
    }

   


    public async Task MostrarModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.mostrarModal", "modalAgregarCategoria");
    }

    public async Task CerrarModal()
    {
        await JSRuntime.InvokeVoidAsync("modalFunctions.cerrarModal", "modalAgregarCategoria");

        // Restablecer valores para agregar una nueva categoría
        idEditar = 0;
        categoria = new CategoriaDTO();
    }
}
