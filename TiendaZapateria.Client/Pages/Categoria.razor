@page "/categorias"

@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
@inject ICategoriaService categoriaService;
@inject NavigationManager navegacion;

@using TiendaZapateria.Client.Pages.Modales;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize(Roles = "Administrador, Empleado")]

@using TiendaZapateria.Client.wwwroot.Paginacion;

<h3>Categorias</h3>

<button class="btn-grad-1 mb-3" @onclick="MostrarModalAgregar">Nueva Categoria</button>

<div class="mb-3">
    <input type="text" class="form-control" @oninput="HandleSearch" placeholder="Filtrar por Nombre">

</div>

<div class="table-responsive">
    <table class="table table-striped">
    <thead>
        <tr>
            <th>Nombre Categoria</th>
            <th>Descripcion</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
            @if (paginatedList != null)
            {
                var categoriasFiltradas = string.IsNullOrEmpty(filtroNombre)
                ? paginatedList
                : paginatedList.Where(c => c.NombreCategoria.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase));

                @foreach (var item in categoriasFiltradas)
                {
                    <tr>
                        <td>@item.NombreCategoria</td>
                        <td>@item.Descripcion</td>
                        <td>
                            <div class="d-flex">
                                <button class="btn btn-primary btn-sm mb-2 d-block" @onclick="() => MostrarModalEditar(item.IdCategoria)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button type="button" class="btn btn-danger btn-sm ms-2 mb-2 d-block" @onclick="(() => Eliminar(item.IdCategoria, item.NombreCategoria))">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
        
    </tbody>
</table>
</div>
<div class="d-flex justify-content-end mt-3">
    <Paginacion CurrentPage="currentPage"
                ItemsPerPage="itemsPerPage"
                TotalItems="lista.Count"
                CurrentPageChanged="HandlePageChange" />
</div>


<MDCategoria @ref="modalAgregar" OnElementoActualizado="HandleElementoActualizado"></MDCategoria>


@code {
    List<CategoriaDTO> lista = new List<CategoriaDTO>();

    IEnumerable<CategoriaDTO>? paginatedList;
    int currentPage = 1;
    int itemsPerPage = 10;

    string filtroNombre = string.Empty;

     private async Task HandleSearch(ChangeEventArgs e)
    {
        filtroNombre = e.Value.ToString();
        UpdatePaginatedList();
    }


    private async Task HandlePageChange(int newPage)
    {
        currentPage = newPage;
        UpdatePaginatedList();
        StateHasChanged(); // Actualiza el componente
    }
    private async Task HandleElementoActualizado()
    {
        lista = await categoriaService.Lista();
        if (lista != null)
        {
            UpdatePaginatedList();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        lista = await categoriaService.Lista();
        UpdatePaginatedList();
    }

    private void UpdatePaginatedList()
    {
        
            paginatedList = lista.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
       
    }

   

    private async Task Eliminar(int id, string nombre)
    {
        var resultadoVerificacion = await categoriaService.VerificarUso(id);

        if (resultadoVerificacion)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "El campo está siendo utilizado en otra tabla",
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonText = "OK"
                });
        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Está Seguro?",
                    Text = "Eliminar" + " " + nombre,
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Eliminar",
                    CancelButtonText = "Volver"
                });

            if (resultado.IsConfirmed)
            {
                var eliminado = await categoriaService.Eliminar(id);

                if (eliminado)
                {
                    lista = lista!.FindAll(e => e.IdCategoria != id);
                    UpdatePaginatedList();
                    await MostrarAlertaEliminacion();
                }
            }
        }
    }

    private async Task MostrarAlertaEliminacion()
    {
        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Categoria Eliminada",
                Text = "La Categoria ha sido eliminada exitosamente",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonText = "OK"
            });
    }

    MDCategoria modalAgregar; // Referencia al componente de modal

    public void MostrarModalAgregar()
    {
        var btnTexto = "Guardar";
        var titulo = "Agregar Nuevo";
        modalAgregar.Agregar(titulo, btnTexto);
        modalAgregar.MostrarModal();


    }


    public async Task MostrarModalEditar(int id)
    {
        var Editar = await categoriaService.Buscar(id);

        if (Editar != null)
        {
            var btnTexto = "Actualizar";
            var titulo = "Editar";
            modalAgregar.Actualizar(Editar.IdCategoria, Editar.NombreCategoria, Editar.Descripcion, titulo, btnTexto);
            modalAgregar.MostrarModal();
        }
    }



}



